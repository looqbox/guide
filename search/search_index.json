{
    "docs": [
        {
            "location": "/",
            "text": "Quickstart\n\n\nLooqbox is the data search solution for your business. \n\n\nOur recommendation is to implement, according to user feedback, all recurrent questions about KPIs from you business. Instead of executing the same database queries every week with different parameters to answer the same questions, just implement scripts once in Looqbox, and the users can ask as many times as they need.\n\n\nAs the number of responses grow, your BI team will stop wasting time repeating work that can be automated in Looqbox. \n\n\n\n\n\n  \n\n\n\n\n\nIntroduction\n\n\n(under construction)\n\n\nInstallation\n\n\nLooqbox must be installed in a Linux distribution that supports Docker (e.g. Ubuntu 18.04 LTS).\n\n\nAfter \ninstalling Docker\n, start Looqbox's container:\n\n\ndocker run -d --restart=always --name=looqbox-instance -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002\n\n\n\n\nTo check if Looqbox started correctly, run: \n\n\ndocker logs -f --tail 200 looqbox-instance\n\n\n\n\nExpected result:\n\n\n  \n\n\n\n\nLooqbox is now serving at port 80 (if it's a local instalation: \nlocalhost:80\n)\n\n\nYour Looqbox instance connects to our cloud (https://cloud002.looqbox.com or host in image above). If you need to add a proxy or change Looqbox's initialization port, \nclick here\n.\n\n\nUpdate or transfer Looqbox to another server/computer\n\n\nAll script files and configurations are backed up in Looqbox's Cloud. To transfer all your work between your local machine and a server or between servers, all you need to do is rerun the docker command above. It will automatically download all files to the new instance. If more than 1 instance is available, response scripts will sync in aprox  45 seconds and all other information instantaneously. \n\n\nTo update Looqbox and Looqbox's R package, pull the image's newest version and start a new container. For more help about docker commands to stop and update Looqbox, \nclick here\n.\n\n\nFirst questions\n\n\nYou can test your newly installed Looqbox by using pre-implemented responses (those responses also serve as models for the responses will you implement later!).\n\n\nTo see the list of available questions/responses, type \"que perguntas posso fazer?\"\n\n\n(The first question asked after starting Looqbox takes about 8 seconds to respond. \nLearn more\n)\n\n\nYour first response/script\n\n\nFollow the steps bellow to create your first Response/Script. \n\n\n\n\nClick the cogs in the right upper corner and then in Admin (don't mistake it with the user area if the user's name you're using is \"Admin\"!).\n\n\nFind \nResponses\n and click it.\n\n\nPress \nNew +\n button. Fill the following fields and leave all others with the default values:\n\n\nResponse Name:\n helloWorld\n\n\nResponse Group:\n admin\n\n\nLanguage:\n pt-br\n\n\nKeyword:\n\n\nhello (press enter to open a new field)\n\n\nworld (enter)\n\n\nscript (enter)\n\n\n$quotes\n\n\n\n\n\n\nExample:\n hello world script \"this is my first script\"\n\n\n\n\n\n\nPress the green button \nCreate new\n at the bottom. There will be a message \"file saved\" at the right upper corner.\n\n\n\n\nYou just created you first Response! Now let's link it with a script.\n\n\n\n\nFind \nResponse Files\n and press \nnew\n in \nmain file missing (new)\n.\n\n\nPress \n+ show editor\n in grey located at the left of the \nsave\n button.\n\n\nCopy the complete script in our \nGithub\n or copy the code below, paste it and press \nsave\n button. \n\n\nClick at Looqbox in the left upper corner to return to the search area, and type \nhello world script \"any message that you want\"\n. If the return was a green message box with the message \nHurray, my installation is working!\n in the first line and the message you wrote in the second line, your installation is complete.\n\n\n\n\n# In order to develop a script for Looqbox you should use our Looqbox Package.\n# The package allows you to interact with the interface and help you structure\n# your data to be displayed in our client.\nlibrary(looqbox)\n\n#-----------------------------------------------------------------------------#\n#---  Response\n#---\n#--- This block is where your script will start the execution, simulating a \n#--- main function. Inside it, you should set your parameters got from parser\n#-----------------------------------------------------------------------------#\nlooq.response <- function(par) {\n\n  # Receives the value inside a looqbox tag. In this case, we're looking for \n  # $quotes tag and storing it in quotes\n  quotes <- looq.lookTag(\"$quotes\", par)\n\n  # Creates a looqbox standard message box and store it in msg variable. In\n  # the first parameter we're passing a paste with the string collected above\n  # the second parameter is the style type to display the box. \n  msg <- looq.objMessage(\n    paste(\"Hurray, my installation is working!\\n\", quotes),\n    \"alert-success\"\n  )\n\n  # Creates a looqbox frame to be placed inside a board\n  looq.responseFrame(msg)\n}\n\n#-----------------------------------------------------------------------------#\n#--- Test Block\n#\n#--- This block is used to test your response, allowing you to simulate our\n#--- parser and test your script without saving it in Looqbox client.\n#---\n#--- If you have configured your Looqbox addin correctly, you can run your \n#--- script using Ctrl + Shift + S and it will be displayed in your client.\n#-----------------------------------------------------------------------------#\nlooq.testQuestion(\n  list(\n    \"$quotes\" = \"My test sentence\"\n  )\n)\n\n\n\n\n\n\nAre you ready to learn more about Looqbox? \nClick here\n to continue.",
            "title": "Quickstart"
        },
        {
            "location": "/#quickstart",
            "text": "Looqbox is the data search solution for your business.   Our recommendation is to implement, according to user feedback, all recurrent questions about KPIs from you business. Instead of executing the same database queries every week with different parameters to answer the same questions, just implement scripts once in Looqbox, and the users can ask as many times as they need.  As the number of responses grow, your BI team will stop wasting time repeating work that can be automated in Looqbox.",
            "title": "Quickstart"
        },
        {
            "location": "/#introduction",
            "text": "(under construction)",
            "title": "Introduction"
        },
        {
            "location": "/#installation",
            "text": "Looqbox must be installed in a Linux distribution that supports Docker (e.g. Ubuntu 18.04 LTS).  After  installing Docker , start Looqbox's container:  docker run -d --restart=always --name=looqbox-instance -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002  To check if Looqbox started correctly, run:   docker logs -f --tail 200 looqbox-instance  Expected result: \n     Looqbox is now serving at port 80 (if it's a local instalation:  localhost:80 )  Your Looqbox instance connects to our cloud (https://cloud002.looqbox.com or host in image above). If you need to add a proxy or change Looqbox's initialization port,  click here .",
            "title": "Installation"
        },
        {
            "location": "/#update-or-transfer-looqbox-to-another-servercomputer",
            "text": "All script files and configurations are backed up in Looqbox's Cloud. To transfer all your work between your local machine and a server or between servers, all you need to do is rerun the docker command above. It will automatically download all files to the new instance. If more than 1 instance is available, response scripts will sync in aprox  45 seconds and all other information instantaneously.   To update Looqbox and Looqbox's R package, pull the image's newest version and start a new container. For more help about docker commands to stop and update Looqbox,  click here .",
            "title": "Update or transfer Looqbox to another server/computer"
        },
        {
            "location": "/#first-questions",
            "text": "You can test your newly installed Looqbox by using pre-implemented responses (those responses also serve as models for the responses will you implement later!).  To see the list of available questions/responses, type \"que perguntas posso fazer?\"  (The first question asked after starting Looqbox takes about 8 seconds to respond.  Learn more )",
            "title": "First questions"
        },
        {
            "location": "/#your-first-responsescript",
            "text": "Follow the steps bellow to create your first Response/Script.    Click the cogs in the right upper corner and then in Admin (don't mistake it with the user area if the user's name you're using is \"Admin\"!).  Find  Responses  and click it.  Press  New +  button. Fill the following fields and leave all others with the default values:  Response Name:  helloWorld  Response Group:  admin  Language:  pt-br  Keyword:  hello (press enter to open a new field)  world (enter)  script (enter)  $quotes    Example:  hello world script \"this is my first script\"    Press the green button  Create new  at the bottom. There will be a message \"file saved\" at the right upper corner.   You just created you first Response! Now let's link it with a script.   Find  Response Files  and press  new  in  main file missing (new) .  Press  + show editor  in grey located at the left of the  save  button.  Copy the complete script in our  Github  or copy the code below, paste it and press  save  button.   Click at Looqbox in the left upper corner to return to the search area, and type  hello world script \"any message that you want\" . If the return was a green message box with the message  Hurray, my installation is working!  in the first line and the message you wrote in the second line, your installation is complete.   # In order to develop a script for Looqbox you should use our Looqbox Package.\n# The package allows you to interact with the interface and help you structure\n# your data to be displayed in our client.\nlibrary(looqbox)\n\n#-----------------------------------------------------------------------------#\n#---  Response\n#---\n#--- This block is where your script will start the execution, simulating a \n#--- main function. Inside it, you should set your parameters got from parser\n#-----------------------------------------------------------------------------#\nlooq.response <- function(par) {\n\n  # Receives the value inside a looqbox tag. In this case, we're looking for \n  # $quotes tag and storing it in quotes\n  quotes <- looq.lookTag(\"$quotes\", par)\n\n  # Creates a looqbox standard message box and store it in msg variable. In\n  # the first parameter we're passing a paste with the string collected above\n  # the second parameter is the style type to display the box. \n  msg <- looq.objMessage(\n    paste(\"Hurray, my installation is working!\\n\", quotes),\n    \"alert-success\"\n  )\n\n  # Creates a looqbox frame to be placed inside a board\n  looq.responseFrame(msg)\n}\n\n#-----------------------------------------------------------------------------#\n#--- Test Block\n#\n#--- This block is used to test your response, allowing you to simulate our\n#--- parser and test your script without saving it in Looqbox client.\n#---\n#--- If you have configured your Looqbox addin correctly, you can run your \n#--- script using Ctrl + Shift + S and it will be displayed in your client.\n#-----------------------------------------------------------------------------#\nlooq.testQuestion(\n  list(\n    \"$quotes\" = \"My test sentence\"\n  )\n)",
            "title": "Your first response/script"
        },
        {
            "location": "/#are-you-ready-to-learn-more-about-looqbox-click-here-to-continue",
            "text": "",
            "title": "Are you ready to learn more about Looqbox? Click here to continue."
        },
        {
            "location": "/Admin-Interface/",
            "text": "Admin Interface\n\n\nLooqbox must be fast - Implementation Flow\n\n\nThere are 2 important concepts that you should know to understand our recommentation about how responses should be implemented in Looqbox.\n\n\n\n\n\n\nLooqbox runs a R script for each question asked by the users. Each of those scripts access a datasource (e.g. MySQL), so the time that a users waits is mainly the response time from the query or API. The maximum recommended time for a response is 2 seconds.\n\n\n\n\n\n\nUsers usually need a bit of experience with the interface to start asking more complex questions, so starting with short and general questions help new users to navigate.\n\n\n\n\n\n\nWe discorage the implementation of complex dashboards in Looqbox, since it usually depends of multiple queries, which result in a long response time.\n\n\nTo guarantee the best user experience, responses should be implemented in a way that users can ask simple questions, and navigate to more specific information using features like drill down. Navigating between 4 tables of content waiting 2 seconds for each load in much better than waiting 8 seconds for a single dashboard.\n\n\nHere is a sequence of questions to illustrate this scenario:\n\n\n\n\nsales $date\n\n\nsales $date by store\n\n\nsales $date by department\n\n\nsales $date by supplier\n\n\n\n\nBasics\n\n\nFollowing the instructions below will allow a admin to perform all kinds of tasks inside Looqbox. Many of the tasks are similar to other systems, such as creating users, connections to DBs and so on.\nTo help navigate quickly to the most important screens and to understand the main feature about Looqbox (NLP), you can use the commands below after a questions to execute special admin commands.\n\n\n$debug\n\n\nThis is your main command to visualize the parameters that Looqbox undestands from a question. If you are getting a unexpected behavior, or if the wrong script is being run when a specific question is asked, you can use $debug to see the response, the entities retrieved from the question and so on.\n\n\n(Please test the examples below. This command will be most useful in the \nEntities section\n)\n\n\n\n\nvenda ontem $debug\n\n\ntop 10 produtos $debug\n\n\nmeta ontem versus hj $debug\n\n\nvenda do ano passado por mes $debug\n\n\n\n\n$response\n\n\nSends the user to the \nresponse\n that Looqbox links to the script that would run with the given question.\n\n\n\n\nvenda ontem $response\n\n\n\n\n$script\n\n\nSends the user to the R script that Looqbox would run with the given question.\n\n\n\n\nvenda ontem $script\n\n\n\n\nDatabase Connection\n\n\nCreating a response\n\n\nHere you can link keywords to a script. \nWe will divide this section 3 parts.\n\n\nBasic info\n\n\nResponse Name: use a name to find this response easily later\n\n\nResponse Group: each response must belong to a response group, used to control who can access this resource\n\n\nEngine: R (default) is the only engine available for scripts\n\n\nCustom evaluation time limit: ATTENTION. Don't modify unless it's extremely necessary. This field is used to modify the default timeout (30s) for a script to respond. Good scripts run under 2 seconds, so there should be really no reason to modify this value\n\n\nActive: (self explanatory)\n\n\nResponse files\n\n\nResponse files: Use this area to upload scripts or help files. The main file will/must always have the same name as the responseName. \nIMPORTANT\n: .r extension MUST be lowercase\n\n\nKeyword Group\n\n\nLanguage: language that will use this keyword group\n\n\nKeyword: \nIMPORTANT\n. Here you can define which keywords must be present in a sentence to run this response. The script that will be executed will always be chosen by the highest number of entities found inside a question that in linked to a response.\nKeywords can be divided in 2 groups:\n\n\n\n\nsimple words: usually stem or a verb in infitive. E.g. for a report about sales, use as keyword \"sales\", and all variations such as \"sell\", \"sold\", \"selling\" can be registered under \nReplacements\n. \n\n\nentities: starts with \"$\", and represent a pattern that can be found in the question. The most used entity is \"$date\", which is preimplemented by Looqbox. You can create your own entities (see \nEntityByCode\n and \nEntityByName\n)\n\n\n\n\nA list of synonyms can be used by separating words with pipes. E.g.: sales|revenue\n\n\nNote that keywords can be optional. This is useful for entites that may appear in a question, but is not fundamental for the main usage case for a response. To illustrate:\n\n\n\n\nImagine that it's important for a user to ask about sales \"sales yesterday\" (which returns a table with the sales in each store), but it's also common to modify the answer by asking \"sales yesterday store 1, 2 and 3\" (which returns a table with the sales of store 1, 2 and 3). In this case, the entity $store is optional, and when available, all values about store (in our example, 1 to 3) will be fowarded to the script within the entity $store.\n\n\n\n\n\n  \n\n\n\n\n\nCreating User\n\n\nIn this section you are able to create users that will have access to Looqbox.\n\n\nUser Login: name used by the user to login.\n\n\nShort Name: alias for the user.\n\n\nEmail: used when a user forgets the password.\n\n\nPassword: (self explanatory)\n\n\nUser Group: Each user must have a \nUser Group\n. User groups are usually divided in roles inside a company (sales, marketing etc)l\n\n\nLanguage: default language for this user.\n\n\nAdmin: select if a user can edit user, responses, entities and so on.\n\n\nActive: (self explanatory)\n\n\n\n  \n\n\n\n\n\nCreating UserGroup\n\n\nUser groups are usually divided in roles inside a company (sales, marketing etc).\nWhen \ncreating users\n, you can define which userGroup this user belongs to.\n\n\nResponse Groups: Define which \nResponse Groups\n are linked to this user group. \n\n\nUser Group Suggestions: Suggestions added will be shown to users that belong to this userGroup in the favorites and autocomplete.\n\n\n\n  \n\n\n\n\n\nCreating ResponseGroup\n\n\nEach \nresponse\n belongs to a single responseGroup. When \ncreating userGroups\n, you can choose multiple responseGroups that access is allowed to the userGroup.\n\n\nResponse Group Name: define a name for a responseGroup. \n\n\n\n  \n\n\n\n\n\nEntity\n\n\nEntities are patterns that can be found in the question, and retrieved as values to be used inside scripts.\n\n\nThe most used entity is \"$date\", which is preimplemented by Looqbox. Other entities can be implemented as you need.\n\n\nE.g.: \"sales last week\" -> $date: [2018-09-10, 2018-09-16]\n\n\nTo visualize the sections bellow, test the examples with the \n$debug command\n in Looqbox's interface.\n\n\nDefault entities by Looqbox\n\n\n$date\n\n\nLooqbox interprets many different ways to refer to dates. Since it's the most used entity, it's always being improved by our team. Here are some examples from thousands of combinations of how a user can refer to a date in Looqbox:\n\n\n\n\nontem, hoje (hj), amanh\u00e3\n\n\nsemana passada, mes passado, ano passado, d\u00e9cada passada\n\n\nsemana que vem, mes que vem, ano que vem, d\u00e9cada que vem\n\n\n1 de abril, 24 de dezembro\n\n\nsetembro de 2018, janeiro do ano passado\n\n\n1 de abril de 2018\n\n\n28/01/1991, 02-02-2010\n\n\nsegunda feira, segunda feira da semana passada, segunda da semana que vem\n\n\n\n\n$datePartition\n\n\nUsed to imply a way to split date value inside a script. Those references are:\n\n\n\n\npor dia, di\u00e1ria, dia a dia\n\n\npor semana, semanal, semana a semana\n\n\npor mes, mensal, mes a mes\n\n\npor bimestre, bimestral, bimestralmente, bimestre a bimestre \n\n\n(same as above for trimestre, quadrimestre, semestre)\n\n\npor ano, anual, ano a ano\n\n\n\n\n$comparative\n\n\nComparative works by indicating a comparison between 2 $dates. For example:\n\n\n\n\nhj vs ontem\n\n\nmes passado versus retrasado\n\n\nano semana passada versus semana atual\n\n\n\n\n$topN\n\n\nUsed for ranking. $topn shows the number of elements that the user intents to select/work with. The maximum positive or negative number is 99,999.\n\n\n\n\ntop 5 \n\n\nmaiores 20\n\n\nmenores 15\n\n\ntop 8 maiores\n\n\ntop 8 menores\n\n\n\n\n$email\n\n\nUsed to return email found in question.\n\n\n\n\ncontact@looqbox.com\n\n\njobs@looqbox.com\n\n\n\n\n$quotes\n\n\nAnything between quotes is treated as plain text (no rules about entities will be applyed). It's commonly used to refer about product, store name and other text that must have a exact value.\n\n\n\n\n\"coca cola\"\n\n\n\"revista abril\"\n\n\n\n\n$diamond\n\n\nSimilar to $quotes, any text between square brackets will be treated as exact value and will have no rules applyed over. \n\n\n\n\n[Looqbox]\n\n\n[350ml pkg 6units]\n\n\n\n\nEntity By Code\n\n\nMost used entity. With EntityByCode, you can define a pattern that, if preceded by a \"head\", will return a value to the R script. E.g.:\n\n\n\n\n$store\n\n\nentity head: \nlojas?|filial|filiais\n, entity pattern: \n\\d+\n\n\nWhen \"venda na loja 20\" is asked, the R script will receive the entity $store with the value 20.\n\n\n\n\nNote that the pattern \\d+ is used to determine if what comes after [loja, lojas, filial, filiais] is a number, and Looqbox will already apply this pattern to a list of stores if necessary, reducing the complexity of patterns that needs to be implemented by you. E.g.:\n\n\n\n\nThe same example above also works for \"venda na loja 20, 21 e 22\", which returns the values [20, 21, 22] to the R script.\n\n\n\n\nAnother way to implement EntityByCode is by combining it with \n$diamond\n. The advantage of using $diamond with EntityByCode can be seem in 2 cases:\n\n\n\n\n\n\nA id is not available, and a exact text must be passed to a new question by a drill down, so it can be used to query information in the DB. \n\n\n\n\n$store\n\n\nentity head: \nlojas?|filial|filiais\n, entity pattern: <>\n\n\nWhen \"venda na loja [Fides]\" is asked, the R script will receive the entity $store with the value \nFides\n. Now this string can be used to query this specific name in the DB.\n\n\n\n\n\n\n\n\nA id and a name for the entity are available, and you want to show the name of a pattern to the user, while using the id to query data in the DB.\n\n\n\n\n$store\n\n\nentity head: \nlojas?|filial|filiais\n, entity pattern: <>\n\n\nWhen \"venda na loja [Fides|20]\" is asked, the R script will receive the entity $store with the value 20. The advantage of this case is that the user sees a highlight with \nFides\n, improving the readability of the question.\n\n\n\n\n\n\n\n\nA useful feature when adding a EntityByCode is to provide a CSV with all entries that you have in your data source, so when a user types a entity head, the entity autocomplete feature will start helping the user with all possible entries provided in the CSV.\n\n\n(under construction)\n\n\nEntity By Name\n\n\nEntityByName is useful when there is a small amount of entries that you want to link with a value (string or number) to be used in R scripts.\n\n\nThis is recommended for a fast implementation when it's known that a user has no knowledge about the id of a entity and types the name of this entity. For cases with a long list of possibilities, we recommend implementing \nEntityByCode\n and upload a CSV with all entries, so the entity autocomplete feature can be used by the user asking the question.\n\n\nHere are some examples:\n\n\n\n\n$city, output: number\n\n\nprefix: cidade\n\n\nfrom: salinas, to: 1\n\n\nfrom: belem, to: 2\n\n\nWhen \"venda na cidade Belem\" is asked, the R script will receive the entity $city with the value 2.\n\n\n\n\n(under construction - example with output:string)\n\n\nReplacements",
            "title": "Admin Interface"
        },
        {
            "location": "/Admin-Interface/#admin-interface",
            "text": "",
            "title": "Admin Interface"
        },
        {
            "location": "/Admin-Interface/#looqbox-must-be-fast-implementation-flow",
            "text": "There are 2 important concepts that you should know to understand our recommentation about how responses should be implemented in Looqbox.    Looqbox runs a R script for each question asked by the users. Each of those scripts access a datasource (e.g. MySQL), so the time that a users waits is mainly the response time from the query or API. The maximum recommended time for a response is 2 seconds.    Users usually need a bit of experience with the interface to start asking more complex questions, so starting with short and general questions help new users to navigate.    We discorage the implementation of complex dashboards in Looqbox, since it usually depends of multiple queries, which result in a long response time.  To guarantee the best user experience, responses should be implemented in a way that users can ask simple questions, and navigate to more specific information using features like drill down. Navigating between 4 tables of content waiting 2 seconds for each load in much better than waiting 8 seconds for a single dashboard.  Here is a sequence of questions to illustrate this scenario:   sales $date  sales $date by store  sales $date by department  sales $date by supplier",
            "title": "Looqbox must be fast - Implementation Flow"
        },
        {
            "location": "/Admin-Interface/#basics",
            "text": "Following the instructions below will allow a admin to perform all kinds of tasks inside Looqbox. Many of the tasks are similar to other systems, such as creating users, connections to DBs and so on.\nTo help navigate quickly to the most important screens and to understand the main feature about Looqbox (NLP), you can use the commands below after a questions to execute special admin commands.",
            "title": "Basics"
        },
        {
            "location": "/Admin-Interface/#debug",
            "text": "This is your main command to visualize the parameters that Looqbox undestands from a question. If you are getting a unexpected behavior, or if the wrong script is being run when a specific question is asked, you can use $debug to see the response, the entities retrieved from the question and so on.  (Please test the examples below. This command will be most useful in the  Entities section )   venda ontem $debug  top 10 produtos $debug  meta ontem versus hj $debug  venda do ano passado por mes $debug",
            "title": "$debug"
        },
        {
            "location": "/Admin-Interface/#response",
            "text": "Sends the user to the  response  that Looqbox links to the script that would run with the given question.   venda ontem $response",
            "title": "$response"
        },
        {
            "location": "/Admin-Interface/#script",
            "text": "Sends the user to the R script that Looqbox would run with the given question.   venda ontem $script",
            "title": "$script"
        },
        {
            "location": "/Admin-Interface/#database-connection",
            "text": "",
            "title": "Database Connection"
        },
        {
            "location": "/Admin-Interface/#creating-a-response",
            "text": "Here you can link keywords to a script. \nWe will divide this section 3 parts.",
            "title": "Creating a response"
        },
        {
            "location": "/Admin-Interface/#basic-info",
            "text": "Response Name: use a name to find this response easily later  Response Group: each response must belong to a response group, used to control who can access this resource  Engine: R (default) is the only engine available for scripts  Custom evaluation time limit: ATTENTION. Don't modify unless it's extremely necessary. This field is used to modify the default timeout (30s) for a script to respond. Good scripts run under 2 seconds, so there should be really no reason to modify this value  Active: (self explanatory)",
            "title": "Basic info"
        },
        {
            "location": "/Admin-Interface/#response-files",
            "text": "Response files: Use this area to upload scripts or help files. The main file will/must always have the same name as the responseName.  IMPORTANT : .r extension MUST be lowercase",
            "title": "Response files"
        },
        {
            "location": "/Admin-Interface/#keyword-group",
            "text": "Language: language that will use this keyword group  Keyword:  IMPORTANT . Here you can define which keywords must be present in a sentence to run this response. The script that will be executed will always be chosen by the highest number of entities found inside a question that in linked to a response.\nKeywords can be divided in 2 groups:   simple words: usually stem or a verb in infitive. E.g. for a report about sales, use as keyword \"sales\", and all variations such as \"sell\", \"sold\", \"selling\" can be registered under  Replacements .   entities: starts with \"$\", and represent a pattern that can be found in the question. The most used entity is \"$date\", which is preimplemented by Looqbox. You can create your own entities (see  EntityByCode  and  EntityByName )   A list of synonyms can be used by separating words with pipes. E.g.: sales|revenue  Note that keywords can be optional. This is useful for entites that may appear in a question, but is not fundamental for the main usage case for a response. To illustrate:   Imagine that it's important for a user to ask about sales \"sales yesterday\" (which returns a table with the sales in each store), but it's also common to modify the answer by asking \"sales yesterday store 1, 2 and 3\" (which returns a table with the sales of store 1, 2 and 3). In this case, the entity $store is optional, and when available, all values about store (in our example, 1 to 3) will be fowarded to the script within the entity $store.",
            "title": "Keyword Group"
        },
        {
            "location": "/Admin-Interface/#creating-user",
            "text": "In this section you are able to create users that will have access to Looqbox.  User Login: name used by the user to login.  Short Name: alias for the user.  Email: used when a user forgets the password.  Password: (self explanatory)  User Group: Each user must have a  User Group . User groups are usually divided in roles inside a company (sales, marketing etc)l  Language: default language for this user.  Admin: select if a user can edit user, responses, entities and so on.  Active: (self explanatory)",
            "title": "Creating User"
        },
        {
            "location": "/Admin-Interface/#creating-usergroup",
            "text": "User groups are usually divided in roles inside a company (sales, marketing etc).\nWhen  creating users , you can define which userGroup this user belongs to.  Response Groups: Define which  Response Groups  are linked to this user group.   User Group Suggestions: Suggestions added will be shown to users that belong to this userGroup in the favorites and autocomplete.",
            "title": "Creating UserGroup"
        },
        {
            "location": "/Admin-Interface/#creating-responsegroup",
            "text": "Each  response  belongs to a single responseGroup. When  creating userGroups , you can choose multiple responseGroups that access is allowed to the userGroup.  Response Group Name: define a name for a responseGroup.",
            "title": "Creating ResponseGroup"
        },
        {
            "location": "/Admin-Interface/#entity",
            "text": "Entities are patterns that can be found in the question, and retrieved as values to be used inside scripts.  The most used entity is \"$date\", which is preimplemented by Looqbox. Other entities can be implemented as you need.  E.g.: \"sales last week\" -> $date: [2018-09-10, 2018-09-16]  To visualize the sections bellow, test the examples with the  $debug command  in Looqbox's interface.",
            "title": "Entity"
        },
        {
            "location": "/Admin-Interface/#default-entities-by-looqbox",
            "text": "",
            "title": "Default entities by Looqbox"
        },
        {
            "location": "/Admin-Interface/#date",
            "text": "Looqbox interprets many different ways to refer to dates. Since it's the most used entity, it's always being improved by our team. Here are some examples from thousands of combinations of how a user can refer to a date in Looqbox:   ontem, hoje (hj), amanh\u00e3  semana passada, mes passado, ano passado, d\u00e9cada passada  semana que vem, mes que vem, ano que vem, d\u00e9cada que vem  1 de abril, 24 de dezembro  setembro de 2018, janeiro do ano passado  1 de abril de 2018  28/01/1991, 02-02-2010  segunda feira, segunda feira da semana passada, segunda da semana que vem",
            "title": "$date"
        },
        {
            "location": "/Admin-Interface/#datepartition",
            "text": "Used to imply a way to split date value inside a script. Those references are:   por dia, di\u00e1ria, dia a dia  por semana, semanal, semana a semana  por mes, mensal, mes a mes  por bimestre, bimestral, bimestralmente, bimestre a bimestre   (same as above for trimestre, quadrimestre, semestre)  por ano, anual, ano a ano",
            "title": "$datePartition"
        },
        {
            "location": "/Admin-Interface/#comparative",
            "text": "Comparative works by indicating a comparison between 2 $dates. For example:   hj vs ontem  mes passado versus retrasado  ano semana passada versus semana atual",
            "title": "$comparative"
        },
        {
            "location": "/Admin-Interface/#topn",
            "text": "Used for ranking. $topn shows the number of elements that the user intents to select/work with. The maximum positive or negative number is 99,999.   top 5   maiores 20  menores 15  top 8 maiores  top 8 menores",
            "title": "$topN"
        },
        {
            "location": "/Admin-Interface/#email",
            "text": "Used to return email found in question.   contact@looqbox.com  jobs@looqbox.com",
            "title": "$email"
        },
        {
            "location": "/Admin-Interface/#quotes",
            "text": "Anything between quotes is treated as plain text (no rules about entities will be applyed). It's commonly used to refer about product, store name and other text that must have a exact value.   \"coca cola\"  \"revista abril\"",
            "title": "$quotes"
        },
        {
            "location": "/Admin-Interface/#diamond",
            "text": "Similar to $quotes, any text between square brackets will be treated as exact value and will have no rules applyed over.    [Looqbox]  [350ml pkg 6units]",
            "title": "$diamond"
        },
        {
            "location": "/Admin-Interface/#entity-by-code",
            "text": "Most used entity. With EntityByCode, you can define a pattern that, if preceded by a \"head\", will return a value to the R script. E.g.:   $store  entity head:  lojas?|filial|filiais , entity pattern:  \\d+  When \"venda na loja 20\" is asked, the R script will receive the entity $store with the value 20.   Note that the pattern \\d+ is used to determine if what comes after [loja, lojas, filial, filiais] is a number, and Looqbox will already apply this pattern to a list of stores if necessary, reducing the complexity of patterns that needs to be implemented by you. E.g.:   The same example above also works for \"venda na loja 20, 21 e 22\", which returns the values [20, 21, 22] to the R script.   Another way to implement EntityByCode is by combining it with  $diamond . The advantage of using $diamond with EntityByCode can be seem in 2 cases:    A id is not available, and a exact text must be passed to a new question by a drill down, so it can be used to query information in the DB.    $store  entity head:  lojas?|filial|filiais , entity pattern: <>  When \"venda na loja [Fides]\" is asked, the R script will receive the entity $store with the value  Fides . Now this string can be used to query this specific name in the DB.     A id and a name for the entity are available, and you want to show the name of a pattern to the user, while using the id to query data in the DB.   $store  entity head:  lojas?|filial|filiais , entity pattern: <>  When \"venda na loja [Fides|20]\" is asked, the R script will receive the entity $store with the value 20. The advantage of this case is that the user sees a highlight with  Fides , improving the readability of the question.     A useful feature when adding a EntityByCode is to provide a CSV with all entries that you have in your data source, so when a user types a entity head, the entity autocomplete feature will start helping the user with all possible entries provided in the CSV.  (under construction)",
            "title": "Entity By Code"
        },
        {
            "location": "/Admin-Interface/#entity-by-name",
            "text": "EntityByName is useful when there is a small amount of entries that you want to link with a value (string or number) to be used in R scripts.  This is recommended for a fast implementation when it's known that a user has no knowledge about the id of a entity and types the name of this entity. For cases with a long list of possibilities, we recommend implementing  EntityByCode  and upload a CSV with all entries, so the entity autocomplete feature can be used by the user asking the question.  Here are some examples:   $city, output: number  prefix: cidade  from: salinas, to: 1  from: belem, to: 2  When \"venda na cidade Belem\" is asked, the R script will receive the entity $city with the value 2.   (under construction - example with output:string)",
            "title": "Entity By Name"
        },
        {
            "location": "/Admin-Interface/#replacements",
            "text": "",
            "title": "Replacements"
        },
        {
            "location": "/R-Scripts/",
            "text": "R Scripts\n\n\n\n\nThis tutorial assumes you don't have any previous knowledge in the Looqbox Package.\n\n\n\n\n\n\n\nSetup for the Tutorial\n\n\nThis documentation's objective is to introduce you to the guidelines for creating organized and efficient R scripts for Looqbox as well as to make you confortable with the looqbox package and with the tool's environment and workflow. In this section we will focus on the creation and editing of the R scripts, so we recomend using Rstudio as the development environment.\n\n\nYou can either write the code in your RStudio Serve, or you can set up a local development environment on your computer and use your local RStudio.\n\n\nRStudio Serve Setup\n\n\nThis is the quickest way to get started!\n\n\nOpen your looqbox instance on port 8787 (usually: \nhttp://localhost:8787\n), enter \nrstudio\n as username and the \npassword\n you created in the \ninstallation\n and you're almost ready to go.\n\n\nUnder addins, select Looqbox and enter your looqbox \nusername\n and \nhost\n (if they're not already there).\n\n\n\n  \n\n\n\n\n\nIt is also recomended to have Looqbox opened on another tab, as your tests will be published there.\n\n\nYou now have everything you need to begin, go ahead to the \nbasics section\n.\n\n\nBasics\n\n\nScript sctructure\n\n\nIn this section, you'll learn about the structure in which your script should be implemented.\n\n\nDependencies\n\n\nIn order to develop a script for Looqbox you should use our Looqbox Package as it allows you to interact with the interface and helps you structure your data to be displayed in our environment.\n\n\nlibrary(\"looqbox\")\n\n\n\n\nget_data\n\n\nThis user defined functions is the core of the script, we keep in it all of the data retrieval and manipulation. In it we also receive as parameters the entities collected from the parser and create the objects and vizualizations which will become our response. \nThis function exists to keep the next block (looq.response) as clean and lean as possible.\n\n\nget_data <- function(dateInt, parameter, value){\n\nsql <- \"\n    SELECT\n        EXAMPLE AS Col1,\n        TEST AS Col2,\n        FIELD AS Col3,\n        DATE AS Date\n    FROM example.table\n    WHERE 1=1           \n        AND Date >= DATE_ADD(`1`, INTERVAL +3 HOUR) \n        AND Date < DATE_ADD(`2`, INTERVAL +3 HOUR)\n        AND PARAMETER = `3`\n        AND VALUE = `4`\n    ORDER BY DATE DESC\"\n\nr <- looq.sqlExecute(\"myDB\", sql, list(dateInt[1], dateInt[2], parameter, value))\nif(r$rows == 0) return(paste(\"No data found from:\\n\", dateInt[1], \"to\", dateInt[2]))\n\nr$total <- list(\n        \"Col1\" = \"Total\",\n        \"Col2\" = sum(r$data$Col2)\n    )\n\nr$searcheable <- T\nr$paginationSize <- 25\n\nr\n}\n\n\n\n\nAbove we have a good example of a generic \nget_data\n function, it receives some parameters, executes a query that uses them and creates a Looqbox table with a total line, searchbar and pagination. In this case the return is simply \nr\n(the \nlooq.objectTable\n) because we assume \nlooq.map\n will be used to call \nget_data\n in the \nlooq.response\n block.\n\n\nDon't worry if you still can't understand what each of these functions do, we have a section dedicated entirely to their study.\n\n\nlooq.response\n\n\nThis block is where your script's execution will start, it resembles the common main function. Inside it, you should use \nlooq.lookTag()\n  to receive the value inside a looqbox tag from the parser.\n\n\nIn this sample, we are creating a looqbox standard message box and storing it in the \nmsg\n variable. In the first parameter we \npaste\n a string and the \nquotes\n entity's value, which was received from the parser. The second parameter message's style type(we will present the options later. \n\n\nFinally, we are creating a looqbox frame with \nlooq.responseFrame()\n, and so, creating a Looqbox intelligible board.\n\n\nlooq.response <- function(par) {\n\n  # Receives the value inside a looqbox tag. In this case, we're looking for \n  # $quotes tag and storing it in quotes\n  quotes <- looq.lookTag(\"$quotes\", par)\n\n  # Creates a looqbox standard message box and stores it in msg variable. In\n  # the first parameter we're passing a paste with the string collected above\n  # the second parameter is the style type to display the box. \n  msg <- looq.objMessage(\n    paste(\"Hurray, my installation is working!!\\n\", quotes),\n    \"alert-success\"\n  )\n\n  # Creates a looqbox frame to be placed inside a board\n  looq.responseFrame(msg)\n}\n\n\n\n\nTest Block\n\n\nThis block is used to test your response from \nRStudio\n, allowing you to simulate our parser and test your script without saving it in Looqbox client. If you have configured your Looqbox addin correctly, you can run your script using \nCtrl + Shift + S\n and it will be published to your client.\n\n\nIn this block you should assign test values to any entities that your script calls for.  \n\n\nlooq.testQuestion(\n  list(\n    \"$quotes\" = \"My test sentence\"\n  )\n)\n\n\n\n\nEssential functions\n\n\nNow that you have a general understanding of how a script is properly constructed, let us go over a few of the package's most important functions. \n\n\nNOTE: In this material we'll be working with practical examples. If you wish to understand the full depth and parameters of each of these functions please refer to the package documentation.\n\n\nlooq.lookTag\n\n\nNormally, the first thing your code will do once it enters your \nlooq.response()\n(main) function, is receive information from the parser (in JSON format). From this, we have to extract information such as entities and tags, which will be used as parameters in \nget_data()\n. \n\n\n\n\nlooq.lookTag()\n acomplishes this task, searching for specific tags and returning their values.\n\n\n\n\ncompany <- looq.lookTag(\"$company\", par)\n\n\n\n\nIn the example above, \nlooq.lookTag\n takes two parameters:\n\n\n\n\n\"$company\"\n: The entity or pattern it will search for. \n\n\npar\n: the parser string, as received by \nlooq.response(par)\n \n\n\n\n\nIt will then, return the company value and assign it to the variable \ncompany\n.\n\n\nIf a certain value is an optional parameter for a question, \nlooq.lookTag()\n also accepts a third parameter for setting a default value (should be a list). \n\n\ndate <- looq.lookTag(\"$date\", par, list(c('2018-01-01', '2019-01-01')))\n\n\n\n\nIn the code above, if no \n$date\n value is recognised by the parser it will choose the default, in this case, the period starting yesterday and ending today (whenever that is).\n\n\nlooq.map\n\n\nThis function is, perhaps, the core of the whole script.\n\n\nlooq.map(get_data, date, company)\n\n\n\n\nWhat it does is fairly simple, the first argument is your \nget_data()\n function, and the remaining are  variables defined by \nlooq.lookTag()\n. \n\n\n\n\nlooq.map()\n calls the function and passes the variables as arguments to it.\n\n\nAdditionally, it wraps everything in a Looqbox response frame making \nget_data\n's \noutput intelligible by the interface. \n\n\n\n\nlooq.sqlExecute\n\n\nNow that we've got \nlooq.response\n covered, we'll go inside \nget_data\n. Think of it as the backstage of your script, it's where everything is prepared so that your main function keeps neat.\n\n\nMost of our scripts involve some kind of query to a database, \nlooq.sqlExecute()\n is a funtion that makes this interaction extremely simple. \n\n\n# We generally store looq.sqlExecute's output in a variable called r\nr <- looq.sqlExecute(\"mySQLDev\", sql, list(dateInt[1], dateInt[2], company, value))\n\n# A simple error test follows the query, checking for data absence\nif(r$rows == 0) return(paste(\"No data found from:\\n\", dateInt[1], \"to\", dateInt[2]))\n\n\n\n\nNormally it will take three arguments:\n\n\n\n\n\"mySQLDB\"\n: the database's name, as it was registered in the interface under connections.\n\n\nsql\n: a string containing the SQL query (we'll cover it in depth) \n\n\n...\n: a list of parameters that will be inserted into the query.\n\n\n\n\nIn a simple manner, \nlooq.sqlExecute\n does exatly what the name implies, it executes your query within the database, but more than that, it lets you insert values in the query. Take the following example string:\n\n\nsql <- \"\n    SELECT\n        EXAMPLE,\n        TEST,\n        FIELD,\n        DATE\n    FROM example.table\n    WHERE 1=1           \n        AND DATE >= DATE_ADD(`1`, INTERVAL +3 HOUR) \n        AND DATE < DATE_ADD(`2`, INTERVAL +3 HOUR)\n        AND COMPANY = `3`\n        AND VALUE = `4`\n    ORDER BY DATE DESC\n\"\n\n\n\n\nThe values between backticks (\n` `\n)  are recognised by the function and substituted with the variables passed in the third argument of \nlooq.SQLExecute\n, in order of appearance. \n\n\nSay that:\n\n\ncompany <- 0\ndateInt <- c('2018-07-09', '2018-08-09')\nvalue <- 1120\n\n\n\n\nThe query sent to the database would be:\n\n\nSELECT\n    EXAMPLE,\n    TEST,\n    FIELD,\n    DATE\nFROM my.exampleDB\nWHERE 1=1\n    AND DATE >= DATE_ADD('2018-07-09', INTERVAL +3 HOUR) \n    AND DATE < DATE_ADD('2018-08-09', INTERVAL +3 HOUR)\n    AND COMPANY = 0\n    AND VALUE = 1120\nORDER BY DATE DESC\n\n\n\n\nEasy right? And it gets better, \nlooq.sqlExecute\n returns a \nlooq.objTable\n, an object from the package that is ready to be imported to the interface.\n\n\nlooq.objTable and it's\n\n\nThe most common answer to Looqbox questions comes in the form of tables, but rather than using comon objects as \ndata.frame\n or \ntbl\n we have developed a special object, which is recognised by the interface and will help you create espoke tables, as it has a number of built-in customization options.\n\n\nWell go through it's most important parameters here, more advanced options will be treated in the \n\nAdvanced Section\n.\n\n\nData\n\n\nr$data\n\n\n\n\nAll of the data retrieved from queries or imported from elsewhere will be available in this variable, which is a \ntbl\n. \n\n\nTitle\n\n\nYou can create a title for your table with \nr$title\n, which will be visible as a header. Another style option is \nr$framedTitle\n. Go ahead and try it out!\n\n\nThe \nr$title\n format accepts multiple lines, creating subtitles or passing other info as a header, \nr$framedTitle\n accepts only a string, but you may combine them to create interesting headers.\n\n\n# Simple title\nr$title <- \"Simple title\"\n\n# Example with framed title\nr$framedTitle <- \"Framed title\"\n\n# Title with date\nr$title <- c(\n    \"My title\",\n    looq.titleWithDate(\"Per\u00edod:\", dateInt)\n)\n\n\n\n\nStyle\n\n\nAdd styling to single or multiple columns through \nr$value$Style\n. Good examples are values that turn red if negative but green if positive. The color can be defined as either hex(#fff) or rgb(255,255,255). \n\n\n\n# Styling single column\nr$valueStyle$Column <- style\n\n# Styling multiple columns at once\nr$valueStyle <- list(\n    \"Column1\" = style,\n    \"Column2\" = style\n)\n\n\n\n\nFormating my data\n\n\nr$valueFormat\n lets you format numbers and dates, adding percentages, defining number of decimal points son so on.  You should write the names of each column followed by the format.\n\n\nr$valueFormat <- list(\n    \"numeric column\" = \"number:2\",\n    \"percent column\" = \"percent:2\"\n)\n\n\n\n\nTotal line\n\n\nAdd a total line to your table, it can be defined for each column. If a column is left blank it will be filled with \n-\n by default.\n\n\nr$total <- list(\n    `Column 1` = \"total\",\n    `Column 2` = sum(r$data$`Column 2`)\n)\n\n\n\n\nDrill Down\n\n\nTo add drill down options that link to other scripts, you should use \nr$ValueLink$[Your Column Here]\n. The question text will be posted as a new question, efectively linking the scripts together. \n\n\nUsing \npaste\n or \npaste0\n we can ad variables or values to the link, or, as you can see below, even add values from within the table, by pasting the desired \nr$data$column\n. \n\n\nThe \n\"text\"\n parameter will add a title to your link, which is essential when multiple drills are made from the same column.\n\n\n# Simple drill\nr$valueLink$Column <- \"my question text here\"\n\n# Simple drill with variable\nr$valueLink$Column <- paste(\"my question text here with this value\", 203)\n\n# Text box drill\nr$valueLink$Column <- list(\n    list(\"text\" = \"by User\", \"link\" = paste(\"my question with this column\", r$data$Column2)),\n    list(\"text\" = \"by Company\", \"link\" = paste(\"my other question with this column\", r$data$Column2))\n)\n\n\n\n\nPagination\n\n\nAdds pagination of the specified size.\n\n\nr$paginationSize <- 25\n\n\n\n\nSearchbar\n\n\nBoolean that adds a searchbar to the table(\nFALSE\n by default). \n\n\nr$searchable <- T\n\n\n\n\nAdvanced\n\n\nOther Vizualizations\n\n\nGraphs\n\n\nMedia\n\n\nDeeper into looq.objTable\n\n\nlooq.responseFrame\n\n\nAdvanced Package Functions\n\n\nModel Scripts",
            "title": "R Scripts"
        },
        {
            "location": "/R-Scripts/#r-scripts",
            "text": "This tutorial assumes you don't have any previous knowledge in the Looqbox Package.",
            "title": "R Scripts"
        },
        {
            "location": "/R-Scripts/#setup-for-the-tutorial",
            "text": "This documentation's objective is to introduce you to the guidelines for creating organized and efficient R scripts for Looqbox as well as to make you confortable with the looqbox package and with the tool's environment and workflow. In this section we will focus on the creation and editing of the R scripts, so we recomend using Rstudio as the development environment.  You can either write the code in your RStudio Serve, or you can set up a local development environment on your computer and use your local RStudio.",
            "title": "Setup for the Tutorial"
        },
        {
            "location": "/R-Scripts/#rstudio-serve-setup",
            "text": "This is the quickest way to get started!  Open your looqbox instance on port 8787 (usually:  http://localhost:8787 ), enter  rstudio  as username and the  password  you created in the  installation  and you're almost ready to go.  Under addins, select Looqbox and enter your looqbox  username  and  host  (if they're not already there).  \n     It is also recomended to have Looqbox opened on another tab, as your tests will be published there.  You now have everything you need to begin, go ahead to the  basics section .",
            "title": "RStudio Serve Setup"
        },
        {
            "location": "/R-Scripts/#basics",
            "text": "",
            "title": "Basics"
        },
        {
            "location": "/R-Scripts/#script-sctructure",
            "text": "In this section, you'll learn about the structure in which your script should be implemented.",
            "title": "Script sctructure"
        },
        {
            "location": "/R-Scripts/#dependencies",
            "text": "In order to develop a script for Looqbox you should use our Looqbox Package as it allows you to interact with the interface and helps you structure your data to be displayed in our environment.  library(\"looqbox\")",
            "title": "Dependencies"
        },
        {
            "location": "/R-Scripts/#get_data",
            "text": "This user defined functions is the core of the script, we keep in it all of the data retrieval and manipulation. In it we also receive as parameters the entities collected from the parser and create the objects and vizualizations which will become our response. \nThis function exists to keep the next block (looq.response) as clean and lean as possible.  get_data <- function(dateInt, parameter, value){\n\nsql <- \"\n    SELECT\n        EXAMPLE AS Col1,\n        TEST AS Col2,\n        FIELD AS Col3,\n        DATE AS Date\n    FROM example.table\n    WHERE 1=1           \n        AND Date >= DATE_ADD(`1`, INTERVAL +3 HOUR) \n        AND Date < DATE_ADD(`2`, INTERVAL +3 HOUR)\n        AND PARAMETER = `3`\n        AND VALUE = `4`\n    ORDER BY DATE DESC\"\n\nr <- looq.sqlExecute(\"myDB\", sql, list(dateInt[1], dateInt[2], parameter, value))\nif(r$rows == 0) return(paste(\"No data found from:\\n\", dateInt[1], \"to\", dateInt[2]))\n\nr$total <- list(\n        \"Col1\" = \"Total\",\n        \"Col2\" = sum(r$data$Col2)\n    )\n\nr$searcheable <- T\nr$paginationSize <- 25\n\nr\n}  Above we have a good example of a generic  get_data  function, it receives some parameters, executes a query that uses them and creates a Looqbox table with a total line, searchbar and pagination. In this case the return is simply  r (the  looq.objectTable ) because we assume  looq.map  will be used to call  get_data  in the  looq.response  block.  Don't worry if you still can't understand what each of these functions do, we have a section dedicated entirely to their study.",
            "title": "get_data"
        },
        {
            "location": "/R-Scripts/#looqresponse",
            "text": "This block is where your script's execution will start, it resembles the common main function. Inside it, you should use  looq.lookTag()   to receive the value inside a looqbox tag from the parser.  In this sample, we are creating a looqbox standard message box and storing it in the  msg  variable. In the first parameter we  paste  a string and the  quotes  entity's value, which was received from the parser. The second parameter message's style type(we will present the options later.   Finally, we are creating a looqbox frame with  looq.responseFrame() , and so, creating a Looqbox intelligible board.  looq.response <- function(par) {\n\n  # Receives the value inside a looqbox tag. In this case, we're looking for \n  # $quotes tag and storing it in quotes\n  quotes <- looq.lookTag(\"$quotes\", par)\n\n  # Creates a looqbox standard message box and stores it in msg variable. In\n  # the first parameter we're passing a paste with the string collected above\n  # the second parameter is the style type to display the box. \n  msg <- looq.objMessage(\n    paste(\"Hurray, my installation is working!!\\n\", quotes),\n    \"alert-success\"\n  )\n\n  # Creates a looqbox frame to be placed inside a board\n  looq.responseFrame(msg)\n}",
            "title": "looq.response"
        },
        {
            "location": "/R-Scripts/#test-block",
            "text": "This block is used to test your response from  RStudio , allowing you to simulate our parser and test your script without saving it in Looqbox client. If you have configured your Looqbox addin correctly, you can run your script using  Ctrl + Shift + S  and it will be published to your client.  In this block you should assign test values to any entities that your script calls for.    looq.testQuestion(\n  list(\n    \"$quotes\" = \"My test sentence\"\n  )\n)",
            "title": "Test Block"
        },
        {
            "location": "/R-Scripts/#essential-functions",
            "text": "Now that you have a general understanding of how a script is properly constructed, let us go over a few of the package's most important functions.   NOTE: In this material we'll be working with practical examples. If you wish to understand the full depth and parameters of each of these functions please refer to the package documentation.",
            "title": "Essential functions"
        },
        {
            "location": "/R-Scripts/#looqlooktag",
            "text": "Normally, the first thing your code will do once it enters your  looq.response() (main) function, is receive information from the parser (in JSON format). From this, we have to extract information such as entities and tags, which will be used as parameters in  get_data() .    looq.lookTag()  acomplishes this task, searching for specific tags and returning their values.   company <- looq.lookTag(\"$company\", par)  In the example above,  looq.lookTag  takes two parameters:   \"$company\" : The entity or pattern it will search for.   par : the parser string, as received by  looq.response(par)     It will then, return the company value and assign it to the variable  company .  If a certain value is an optional parameter for a question,  looq.lookTag()  also accepts a third parameter for setting a default value (should be a list).   date <- looq.lookTag(\"$date\", par, list(c('2018-01-01', '2019-01-01')))  In the code above, if no  $date  value is recognised by the parser it will choose the default, in this case, the period starting yesterday and ending today (whenever that is).",
            "title": "looq.lookTag"
        },
        {
            "location": "/R-Scripts/#looqmap",
            "text": "This function is, perhaps, the core of the whole script.  looq.map(get_data, date, company)  What it does is fairly simple, the first argument is your  get_data()  function, and the remaining are  variables defined by  looq.lookTag() .    looq.map()  calls the function and passes the variables as arguments to it.  Additionally, it wraps everything in a Looqbox response frame making  get_data 's \noutput intelligible by the interface.",
            "title": "looq.map"
        },
        {
            "location": "/R-Scripts/#looqsqlexecute",
            "text": "Now that we've got  looq.response  covered, we'll go inside  get_data . Think of it as the backstage of your script, it's where everything is prepared so that your main function keeps neat.  Most of our scripts involve some kind of query to a database,  looq.sqlExecute()  is a funtion that makes this interaction extremely simple.   # We generally store looq.sqlExecute's output in a variable called r\nr <- looq.sqlExecute(\"mySQLDev\", sql, list(dateInt[1], dateInt[2], company, value))\n\n# A simple error test follows the query, checking for data absence\nif(r$rows == 0) return(paste(\"No data found from:\\n\", dateInt[1], \"to\", dateInt[2]))  Normally it will take three arguments:   \"mySQLDB\" : the database's name, as it was registered in the interface under connections.  sql : a string containing the SQL query (we'll cover it in depth)   ... : a list of parameters that will be inserted into the query.   In a simple manner,  looq.sqlExecute  does exatly what the name implies, it executes your query within the database, but more than that, it lets you insert values in the query. Take the following example string:  sql <- \"\n    SELECT\n        EXAMPLE,\n        TEST,\n        FIELD,\n        DATE\n    FROM example.table\n    WHERE 1=1           \n        AND DATE >= DATE_ADD(`1`, INTERVAL +3 HOUR) \n        AND DATE < DATE_ADD(`2`, INTERVAL +3 HOUR)\n        AND COMPANY = `3`\n        AND VALUE = `4`\n    ORDER BY DATE DESC\n\"  The values between backticks ( ` ` )  are recognised by the function and substituted with the variables passed in the third argument of  looq.SQLExecute , in order of appearance.   Say that:  company <- 0\ndateInt <- c('2018-07-09', '2018-08-09')\nvalue <- 1120  The query sent to the database would be:  SELECT\n    EXAMPLE,\n    TEST,\n    FIELD,\n    DATE\nFROM my.exampleDB\nWHERE 1=1\n    AND DATE >= DATE_ADD('2018-07-09', INTERVAL +3 HOUR) \n    AND DATE < DATE_ADD('2018-08-09', INTERVAL +3 HOUR)\n    AND COMPANY = 0\n    AND VALUE = 1120\nORDER BY DATE DESC  Easy right? And it gets better,  looq.sqlExecute  returns a  looq.objTable , an object from the package that is ready to be imported to the interface.",
            "title": "looq.sqlExecute"
        },
        {
            "location": "/R-Scripts/#looqobjtable-and-its",
            "text": "The most common answer to Looqbox questions comes in the form of tables, but rather than using comon objects as  data.frame  or  tbl  we have developed a special object, which is recognised by the interface and will help you create espoke tables, as it has a number of built-in customization options.  Well go through it's most important parameters here, more advanced options will be treated in the  Advanced Section .",
            "title": "looq.objTable and it's"
        },
        {
            "location": "/R-Scripts/#data",
            "text": "r$data  All of the data retrieved from queries or imported from elsewhere will be available in this variable, which is a  tbl .",
            "title": "Data"
        },
        {
            "location": "/R-Scripts/#title",
            "text": "You can create a title for your table with  r$title , which will be visible as a header. Another style option is  r$framedTitle . Go ahead and try it out!  The  r$title  format accepts multiple lines, creating subtitles or passing other info as a header,  r$framedTitle  accepts only a string, but you may combine them to create interesting headers.  # Simple title\nr$title <- \"Simple title\"\n\n# Example with framed title\nr$framedTitle <- \"Framed title\"\n\n# Title with date\nr$title <- c(\n    \"My title\",\n    looq.titleWithDate(\"Per\u00edod:\", dateInt)\n)",
            "title": "Title"
        },
        {
            "location": "/R-Scripts/#style",
            "text": "Add styling to single or multiple columns through  r$value$Style . Good examples are values that turn red if negative but green if positive. The color can be defined as either hex(#fff) or rgb(255,255,255).   \n# Styling single column\nr$valueStyle$Column <- style\n\n# Styling multiple columns at once\nr$valueStyle <- list(\n    \"Column1\" = style,\n    \"Column2\" = style\n)",
            "title": "Style"
        },
        {
            "location": "/R-Scripts/#formating-my-data",
            "text": "r$valueFormat  lets you format numbers and dates, adding percentages, defining number of decimal points son so on.  You should write the names of each column followed by the format.  r$valueFormat <- list(\n    \"numeric column\" = \"number:2\",\n    \"percent column\" = \"percent:2\"\n)",
            "title": "Formating my data"
        },
        {
            "location": "/R-Scripts/#total-line",
            "text": "Add a total line to your table, it can be defined for each column. If a column is left blank it will be filled with  -  by default.  r$total <- list(\n    `Column 1` = \"total\",\n    `Column 2` = sum(r$data$`Column 2`)\n)",
            "title": "Total line"
        },
        {
            "location": "/R-Scripts/#drill-down",
            "text": "To add drill down options that link to other scripts, you should use  r$ValueLink$[Your Column Here] . The question text will be posted as a new question, efectively linking the scripts together.   Using  paste  or  paste0  we can ad variables or values to the link, or, as you can see below, even add values from within the table, by pasting the desired  r$data$column .   The  \"text\"  parameter will add a title to your link, which is essential when multiple drills are made from the same column.  # Simple drill\nr$valueLink$Column <- \"my question text here\"\n\n# Simple drill with variable\nr$valueLink$Column <- paste(\"my question text here with this value\", 203)\n\n# Text box drill\nr$valueLink$Column <- list(\n    list(\"text\" = \"by User\", \"link\" = paste(\"my question with this column\", r$data$Column2)),\n    list(\"text\" = \"by Company\", \"link\" = paste(\"my other question with this column\", r$data$Column2))\n)",
            "title": "Drill Down"
        },
        {
            "location": "/R-Scripts/#pagination",
            "text": "Adds pagination of the specified size.  r$paginationSize <- 25",
            "title": "Pagination"
        },
        {
            "location": "/R-Scripts/#searchbar",
            "text": "Boolean that adds a searchbar to the table( FALSE  by default).   r$searchable <- T",
            "title": "Searchbar"
        },
        {
            "location": "/R-Scripts/#advanced",
            "text": "",
            "title": "Advanced"
        },
        {
            "location": "/R-Scripts/#other-vizualizations",
            "text": "",
            "title": "Other Vizualizations"
        },
        {
            "location": "/R-Scripts/#graphs",
            "text": "",
            "title": "Graphs"
        },
        {
            "location": "/R-Scripts/#media",
            "text": "",
            "title": "Media"
        },
        {
            "location": "/R-Scripts/#deeper-into-looqobjtable",
            "text": "",
            "title": "Deeper into looq.objTable"
        },
        {
            "location": "/R-Scripts/#looqresponseframe",
            "text": "",
            "title": "looq.responseFrame"
        },
        {
            "location": "/R-Scripts/#advanced-package-functions",
            "text": "",
            "title": "Advanced Package Functions"
        },
        {
            "location": "/R-Scripts/#model-scripts",
            "text": "",
            "title": "Model Scripts"
        },
        {
            "location": "/Read-more/",
            "text": "Read More\n\n\nThis section has extra documentation about different areas that don't fall in any other category.\n\n\nArchitecture\n\n\nYour on-premise instance of Looqbox must connect to Looqbox's cloud at all times. The cloud is used to control user access, register access groups and linguistic parameters, and (most important) understand the questions typed by users.\n\n\nAll users and admins connect directly to the on-premise instance. Only on-premise instances communicate with the cloud. \n\n\nThis architecture allows that a simple rule of access from within your company's network must be set (add the cloud DNS to a whitelist or allow access from a firewall), while users inside company access the local instance. If you need to use proxy, \nclick here\n.\n\n\nIt's important to remember that when generating a visualization for a user, your on-premise instance \ndoesn't send the information retrieved from your Data Sources to Looqbox's cloud\n.\n\n\n\n  \n\n\n\n\n\n\n\nRKernel\n\n\nEvery R script in Looqbox is processed by a RKernel. RKernels are a logical unit that controls a session in R.\n\n\nThe more RKernel available, the more scripts can be processed at the same time. On the other hand, more RAM in consumed.\n\n\nSince a good implementation of R scripts in Looqbox run on average below 2 seconds, even for hundreds of users, only a few RKernels are required (usually between 2 and 6). Don't worry, RKernels are started as needed to processes scripts if the current number is not enough.\n\n\nEvery RKernel has a session, so it's possible that during the execution of a script, a RKernel enters in a bad state. In cases that you suspect some kind of bad state is influencing responses, destroy the RKernels. It's also possible that different packages loaded by R scripts have the same function name, in this case, inconsistency can be found while executing different scripts that fall in this case (prefix function calls with the package name to avoid such cases, e.g. httr::config and dplyr::config).\n\n\nIn case of a script breaking (syntax error or exceptions), the RKernel is automatically destroyed (saving the last question asked for debugging purposes).\n\n\nIf a user asks a question and all RKernels are currently being used to processes other responses, a new RKernel starts, and will be available in the pool.\n\n\nA new RKernel take about 7 seconds to start.\n\n\nLooqbox has the right to limit the number of RKernel available to each client, and if more than 1 on-premise instance of Looqbox is online at the same time for the same company, the total number of RKernels available will be divided between the instances.\n\n\nAvailable parameters when starting Looqbox\n\n\nThe parameters bellow can be added when starting looqbox.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-e XMX=\"-Xmx512m\"\n\n\nchange maximum heap\n\n\n\n\n\n\n-e XMS=\"-Xms512m\"\n\n\nchange minimum heap\n\n\n\n\n\n\n-e PORT\n\n\nchange Looqbox's port (default 80)\n\n\n\n\n\n\n-e PROXY_HOST=\"<ip>\"\n\n\nwhen parameter exists, use host as proxy (must define proxy_port as well)\n\n\n\n\n\n\n-e PROXY_PORT=\"<port>\"\n\n\nwhen parameter exists, use port as proxy (must define proxy_host as well)\n\n\n\n\n\n\n\n\nExamples\n\n\nTo configure a proxy:\n\n\ndocker run -d --restart=always --name=looqbox-instance -e PROXY_HOST=\"127.0.0.1\" -e PROXY_PORT=\"8080\" -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002\n\n\n\n\nTo change the initial memory used by Java (default is 2Gb):\n\n\ndocker run -d --restart=always --name=looqbox-instance -e XMX=\"-Xmx512m\" -e XMS=\"-Xms512m\" -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002\n\n\n\n\nIt's not recommeded to use bellow 512mb. Looqbox is not a full stateless service, don't use it in High Availability without contacting our support.\n\n\nDocker commands for looqbox\n\n\nThose are the most common Docker commands that will be used with Looqbox. Execute them in the order below to update Looqbox's version.\n\n\nStop Looqbox's container\n\n\ndocker stop looqbox-instance\n\n\n\n\nRemove Looqbox's image :(\n\n\ndocker rm looqbox-instance\n\n\n\n\nPull new version\n\n\ndocker pull looqboxrep/fes-public:cloud002\n\n\n\n\nStart Looqbox\n\n\ndocker run -d --restart=always --name=looqbox-instance -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002\n\n\n\n\nCheck looqbox's logs\n\n\ndocker logs -f --tail 200 looqbox-instance",
            "title": "Read More"
        },
        {
            "location": "/Read-more/#read-more",
            "text": "This section has extra documentation about different areas that don't fall in any other category.",
            "title": "Read More"
        },
        {
            "location": "/Read-more/#architecture",
            "text": "Your on-premise instance of Looqbox must connect to Looqbox's cloud at all times. The cloud is used to control user access, register access groups and linguistic parameters, and (most important) understand the questions typed by users.  All users and admins connect directly to the on-premise instance. Only on-premise instances communicate with the cloud.   This architecture allows that a simple rule of access from within your company's network must be set (add the cloud DNS to a whitelist or allow access from a firewall), while users inside company access the local instance. If you need to use proxy,  click here .  It's important to remember that when generating a visualization for a user, your on-premise instance  doesn't send the information retrieved from your Data Sources to Looqbox's cloud .",
            "title": "Architecture"
        },
        {
            "location": "/Read-more/#rkernel",
            "text": "Every R script in Looqbox is processed by a RKernel. RKernels are a logical unit that controls a session in R.  The more RKernel available, the more scripts can be processed at the same time. On the other hand, more RAM in consumed.  Since a good implementation of R scripts in Looqbox run on average below 2 seconds, even for hundreds of users, only a few RKernels are required (usually between 2 and 6). Don't worry, RKernels are started as needed to processes scripts if the current number is not enough.  Every RKernel has a session, so it's possible that during the execution of a script, a RKernel enters in a bad state. In cases that you suspect some kind of bad state is influencing responses, destroy the RKernels. It's also possible that different packages loaded by R scripts have the same function name, in this case, inconsistency can be found while executing different scripts that fall in this case (prefix function calls with the package name to avoid such cases, e.g. httr::config and dplyr::config).  In case of a script breaking (syntax error or exceptions), the RKernel is automatically destroyed (saving the last question asked for debugging purposes).  If a user asks a question and all RKernels are currently being used to processes other responses, a new RKernel starts, and will be available in the pool.  A new RKernel take about 7 seconds to start.  Looqbox has the right to limit the number of RKernel available to each client, and if more than 1 on-premise instance of Looqbox is online at the same time for the same company, the total number of RKernels available will be divided between the instances.",
            "title": "RKernel"
        },
        {
            "location": "/Read-more/#available-parameters-when-starting-looqbox",
            "text": "The parameters bellow can be added when starting looqbox.     Parameter  Description      -e XMX=\"-Xmx512m\"  change maximum heap    -e XMS=\"-Xms512m\"  change minimum heap    -e PORT  change Looqbox's port (default 80)    -e PROXY_HOST=\"<ip>\"  when parameter exists, use host as proxy (must define proxy_port as well)    -e PROXY_PORT=\"<port>\"  when parameter exists, use port as proxy (must define proxy_host as well)",
            "title": "Available parameters when starting Looqbox"
        },
        {
            "location": "/Read-more/#examples",
            "text": "To configure a proxy:  docker run -d --restart=always --name=looqbox-instance -e PROXY_HOST=\"127.0.0.1\" -e PROXY_PORT=\"8080\" -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002  To change the initial memory used by Java (default is 2Gb):  docker run -d --restart=always --name=looqbox-instance -e XMX=\"-Xmx512m\" -e XMS=\"-Xms512m\" -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002  It's not recommeded to use bellow 512mb. Looqbox is not a full stateless service, don't use it in High Availability without contacting our support.",
            "title": "Examples"
        },
        {
            "location": "/Read-more/#docker-commands-for-looqbox",
            "text": "Those are the most common Docker commands that will be used with Looqbox. Execute them in the order below to update Looqbox's version.",
            "title": "Docker commands for looqbox"
        },
        {
            "location": "/Read-more/#stop-looqboxs-container",
            "text": "docker stop looqbox-instance",
            "title": "Stop Looqbox's container"
        },
        {
            "location": "/Read-more/#remove-looqboxs-image",
            "text": "docker rm looqbox-instance",
            "title": "Remove Looqbox's image :("
        },
        {
            "location": "/Read-more/#pull-new-version",
            "text": "docker pull looqboxrep/fes-public:cloud002",
            "title": "Pull new version"
        },
        {
            "location": "/Read-more/#start-looqbox",
            "text": "docker run -d --restart=always --name=looqbox-instance -e CLIENT=\"<client name>\" -e KEY=\"<client key>\" -e RSTUDIO_PASS=\"<choose a password>\" -p 80:80 -p 8787:8787 looqboxrep/fes-public:cloud002",
            "title": "Start Looqbox"
        },
        {
            "location": "/Read-more/#check-looqboxs-logs",
            "text": "docker logs -f --tail 200 looqbox-instance",
            "title": "Check looqbox's logs"
        }
    ]
}